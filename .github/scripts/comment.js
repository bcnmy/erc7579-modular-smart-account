module.exports = async ({ github, context, header, body }) => {
  // Function to select emoji based on the impact level found in the text
  const getEmoji = (text) => {
    if (text.includes("High")) return ":red_circle: ðŸ¤¬ ";
    if (text.includes("Medium")) return ":yellow_circle: ðŸ˜’ ";
    if (text.includes("Low")) return ":large_blue_circle: ðŸ«¢ ";
    if (text.includes("Informational")) return ":information_source: ðŸ™„ ";
    return "";
  };

  // Function to shorten GitHub URLs to Markdown link format
  const shortenUrls = (text) => {
    const urlRegex = /https:\/\/github\.com\/([^\/]+\/[^\/]+\/blob\/[^\/]+\/)([^#]+#L\d+-L\d+)/g;
    return text.replace(urlRegex, (_, p1, p2) => `[${p2.replace(/-/g, ' to ')}](https://github.com/${p1}${p2})`);
  };

  // Process the body to add emojis and shorten URLs
  const processedBody = body.split("\n").map((line) => {
    const processedLine = shortenUrls(line); // Apply URL shortening
    const emoji = getEmoji(processedLine);
    return emoji ? `${emoji} ${processedLine}` : processedLine; // Add emoji if applicable
  }).join("\n");

  const markdownComment = `
## :robot: Slither Analysis Report :mag_right:

${header}

${processedBody}

_This comment was automatically generated by the GitHub Actions workflow._
`;

  // Check if the workflow is triggered by a pull request event
  if (!context.payload.pull_request) {
    console.log("This workflow is not triggered by a pull request. Skipping comment creation/update.");
    return;
  }

  // Fetch all comments on the PR
  const { data: comments } = await github.rest.issues.listComments({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: context.payload.pull_request.number,
  });

  // Find an existing comment by the bot
  const botComment = comments.find(comment => comment.user.type === "Bot" && comment.body.startsWith(header));

  // Define the function name based on whether we have an existing comment
  const commentFn = botComment ? "updateComment" : "createComment";

  // Post or update the comment
  const response = await github.rest.issues[commentFn]({
    owner: context.repo.owner,
    repo: context.repo.repo,
    ...(botComment ? { comment_id: botComment.id } : { issue_number: context.payload.pull_request.number }),
    body: markdownComment,
  });

  console.log(response.status === 200 ? "Slither analysis comment created or updated successfully." : "Failed to create or update the comment.");
};
