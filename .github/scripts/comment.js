module.exports = async ({ github, context, header, body }) => {
  // Assume body is a JSON string of issues. Parse it.
  const issues = JSON.parse(body);

  // Function to select emoji based on the impact level
  const getEmoji = (impact) => {
    switch (impact.toLowerCase()) {
      case "high":
        return ":red_circle:";
      case "medium":
        return ":yellow_circle:";
      case "low":
        return ":large_blue_circle:";
      case "informational":
        return ":information_source:";
      default:
        return ":grey_question:";
    }
  };

  // Generate the formatted body with Markdown
  let formattedBody = issues
    .map((issue) => {
      const emoji = getEmoji(issue.impact);
      return `
**${emoji} ${issue.title}**
_Impact_: **${issue.impact}**
_Confidence_: **${issue.confidence}**
_Details_:
${issue.description}

[View in code](${issue.link})
---
`;
    })
    .join("\n");

  const markdownComment = `
## :robot: Slither Analysis Report :mag:

${header}

${formattedBody}

_This comment was automatically generated by the GitHub Actions workflow._
`;

  // Check if the workflow is triggered by a pull request event
  if (!context.payload.pull_request) {
    console.log(
      "This workflow is not triggered by a pull request. Skipping comment creation/update.",
    );
    return;
  }

  // Fetch all comments on the PR
  const { data: comments } = await github.rest.issues.listComments({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: context.payload.pull_request.number,
  });

  // Find an existing comment by the bot
  const botComment = comments.find(
    (comment) => comment.user.type === "Bot" && comment.body.startsWith(header),
  );

  // Define the function name based on whether we have an existing comment
  const commentFn = botComment ? "updateComment" : "createComment";

  // Post or update the comment
  await github.rest.issues[commentFn]({
    owner: context.repo.owner,
    repo: context.repo.repo,
    body: markdownComment,
    ...(botComment
      ? { comment_id: botComment.id }
      : { issue_number: context.payload.pull_request.number }),
  });

  console.log("Slither analysis comment created or updated.");
};
